{"version":3,"sources":["utils/LargeTable.js","components/CanvasDatagrid.js","App.js","serviceWorker.js","index.js"],"names":["CanvasDatagrid","nextProps","_this","this","Object","keys","props","forEach","key","undefined","grid","attributes","updateAttributes","dispose","ReactDOM","findDOMNode","React","createElement","Component","data","schemas","i","push","name","concat","length","HARD_DATA","SCHEMA","App","react_default","a","className","components_CanvasDatagrid","style","width","height","schema","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAKA,mFC+BeA,2LA/BIC,GAAW,IAAAC,EAAAC,KACxBC,OAAOC,KAAKF,KAAKG,OAAOC,QAAQ,SAAAC,GACvBP,GAAaC,EAAKI,MAAME,KAASP,EAAUO,UACVC,IAA9BP,EAAKQ,KAAKC,WAAWH,GACrBN,EAAKQ,KAAKC,WAAWH,GAAOP,EAAYA,EAAUO,GAAON,EAAKI,MAAME,GAEpEN,EAAKQ,KAAKF,GAAOP,EAAYA,EAAUO,GAAON,EAAKI,MAAME,wDAK/CP,GACtBE,KAAKS,iBAAiBX,mDAGtB,OAAO,iDAGPE,KAAKO,KAAKG,sDAIVV,KAAKO,KAAOI,IAASC,YAAYZ,MACjCA,KAAKS,oDAIL,OAAOI,IAAMC,cAAc,kBAAmB,WA7BvBD,IAAME,WDH/BC,EAAO,GACPC,EAAU,GAILC,EAAI,EAAGA,EAAI,IAAMA,IACxBD,EAAQE,KAAK,CAAEC,KAAI,OAAAC,OAASH,EAAE,KAIhCF,EAAKM,OAAS,IAEP,IAAMC,EAAYP,EACZQ,EAASP,QEAPQ,MARf,WACE,OACEC,EAAAC,EAAAb,cAAA,OAAKc,UAAU,OACbF,EAAAC,EAAAb,cAACe,EAAD,CAAgBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAUhB,KAAMO,EAAWU,OAAQT,MCIrEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN3B,IAAS4B,OAAOb,EAAAC,EAAAb,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f76c61ca.chunk.js","sourcesContent":["let data = []\nlet schemas = []\n\n\n// generate columns - sample: 1.000 columns\nfor (let i = 0; i < 1000; i++) {\n  schemas.push({ name: `col_${i+1}`})\n}\n\n// generate rows - sample : 1.000.000 rows\ndata.length = 1000000\n\nexport const HARD_DATA = data\nexport const SCHEMA = schemas","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass CanvasDatagrid extends React.Component {\n\n  updateAttributes(nextProps) {\n      Object.keys(this.props).forEach(key => {\n          if (!nextProps || this.props[key] !== nextProps[key]) {\n              if (this.grid.attributes[key] !== undefined) {\n                  this.grid.attributes[key] = nextProps ? nextProps[key] : this.props[key];\n              } else {\n                  this.grid[key] = nextProps ? nextProps[key] : this.props[key];\n              }\n          }\n      });\n  }\n  componentWillReceiveProps(nextProps) {\n      this.updateAttributes(nextProps);\n  }\n  shouldComponentUpdate() {\n      return false;\n  }\n  componentWillUnmount() {\n      this.grid.dispose();\n  }\n  componentDidMount() {\n      const args = {};\n      this.grid = ReactDOM.findDOMNode(this);\n      this.updateAttributes();\n  }\n\n  render() {\n      return React.createElement('canvas-datagrid', {});\n  }\n}\n\nexport default CanvasDatagrid","import React from 'react';\nimport CanvasDatagrid from './components/CanvasDatagrid'\nimport { HARD_DATA, SCHEMA } from './utils/LargeTable'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CanvasDatagrid style={{ width: '100%', height: '100vh'}} data={HARD_DATA} schema={SCHEMA} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}